package SJMS.proxy.proxydemo._proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class Demo {
    public static void main(String[] args) {

        Project1 project1 = new Project1();
        // 类加载器：可以指定任务加载器
        ClassLoader loader=Demo.class.getClassLoader();
        // 要访问的接口
        //如果我们有对应的对象的信息，我们可以从对象中获取他所实现的接口
        // 如果 我们没有对应的对象，可以直接指定我们要实现的接口即可
        // mybatis 通过接口的形式产生对象的示例，我们只定义了接口

        //Class<?>[] interfaces=project1.getClass().getInterfaces();
        Class[] interfaces={It1.class,It2.class};
        InvocationHandler h=new MyInvocationHandler();

        //object 就是该接口 或被代理对象的代理对象
        Object object= Proxy.newProxyInstance(loader,interfaces,h);
        It1 it1=(It1)object;
        it1.m1();
        it1.m2(100);


        It2 it2=(It2)object;
        it2.m3(300);
        It2 it21 = it2.m4();
        System.out.println("--------------");
        it21.m3(1000);
        //System.out.println(object);
        // 上面的案例代理的没有实例的代理对象

    }
}

class MyInvocationHandler implements  InvocationHandler{

    /*
    * Object proxy, Method method, Object[] args
    * proxy  创建出来的代理对象
    * Method  代理对象在运行时候是有调用方法
    * args    代理对象在运行时候是有调用方法时候获取的实参
    * Object invoke  代理对象 执行完后的返回值
    * */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        System.out.println("我被执行了。。。。。。"+method.getName());
        if(args !=null){
            for (int i = 0; i <args.length ; i++) {
                System.out.println(args[i]);
            }
        }

        if("m4".equals(method.getName())){

            System.out.println("我要返回it2的实例");
            return proxy;
        }

        return 400;
    }
}

interface  It1{
    void   m1();
    void  m2(int a);
}

interface  It2{
    int m3(int a);
    It2 m4(); //又要返回对应的IT2的实例
}


class  Project1 implements  It1,It2{
    @Override
    public void m1() {
        System.out.println("m1");
    }

    @Override
    public void m2(int a) {
        System.out.println("m2   a:"+a);
    }

    @Override
    public int m3(int a) {
        System.out.println("m3   a:"+a);
        return a*a;
    }

    @Override
    public It2 m4() {
        return null;
    }
}